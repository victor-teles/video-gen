name: Deploy to AWS Fargate

on:
  workflow_dispatch: ~

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: vcg
  ENVIRONMENT: production
  OLD_PROJECT_NAME: video-clip-generator

jobs:
  # Test and Build
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install basic dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn pytest requests python-dotenv sqlalchemy boto3 aiofiles python-multipart celery redis opencv-python numpy

    - name: Create test environment file
      run: |
        echo "STORAGE_TYPE=s3" > .env
        echo "S3_BUCKET_NAME=test-bucket" >> .env
        echo "AWS_REGION=us-east-1" >> .env
        echo "DATABASE_URL=sqlite:///./test.db" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env

    - name: Run basic import tests
      run: |
        python -c "import fastapi; print('✅ FastAPI imported successfully')"
        python -c "
        try:
            import config
            from models import ProcessingJob, GeneratedClip
            from database import get_db
            print('✅ Core modules imported successfully')
        except ImportError as e:
            print('❌ Core import error:', e)
            raise e
        "
        python -c "
        try:
            import main
            print('✅ Main module imported successfully')
        except ImportError as e:
            error_str = str(e).lower()
            heavy_deps = ['torch', 'ultralytics', 'whisperx', 'clipsai', 'clip_generator']
            if any(dep in error_str for dep in heavy_deps):
                print('⚠️  Heavy ML dependency missing (expected in CI):', e)
                print('✅ Core application structure is valid - ML dependencies will be available in Docker')
            else:
                print('❌ Unexpected import error:', e)
                raise e
        "

    - name: Test API structure
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            from main import app
            from fastapi.testclient import TestClient
            print('✅ FastAPI app structure is valid')
        except ImportError as e:
            if 'torch' in str(e) or 'ultralytics' in str(e) or 'whisperx' in str(e):
                print('⚠️  Heavy ML dependencies not available in CI (expected)')
                print('✅ Core app structure is valid')
            else:
                raise e
        "

  # Deploy Infrastructure
  deploy-infrastructure:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      ecr-api-uri: ${{ steps.deploy-infra.outputs.ecr-api-uri }}
      ecr-worker-uri: ${{ steps.deploy-infra.outputs.ecr-worker-uri }}
      load-balancer-url: ${{ steps.deploy-infra.outputs.load-balancer-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy infrastructure stack
      id: deploy-infra
      run: |
        # Function to check if stack exists
        stack_exists() {
          local stack_name=$1
          aws cloudformation describe-stacks --stack-name $stack_name >/dev/null 2>&1
          return $?
        }

        # Function to delete stack and wait for completion
        delete_stack() {
          local stack_name=$1
          if stack_exists "$stack_name"; then
            echo "Found existing stack $stack_name, preparing for deletion..."
            
            # Get list of resources to monitor
            echo "Listing stack resources..."
            aws cloudformation list-stack-resources --stack-name $stack_name
            
            echo "Starting deletion of stack $stack_name..."
            aws cloudformation delete-stack --stack-name $stack_name
            
            echo "Waiting for stack deletion to complete (this may take several minutes)..."
            while stack_exists "$stack_name"; do
              echo "Stack deletion in progress... checking status"
              aws cloudformation describe-stack-events \
                --stack-name $stack_name \
                --query 'StackEvents[?ResourceStatus==`DELETE_IN_PROGRESS`].[LogicalResourceId,ResourceStatus,ResourceStatusReason]' \
                --output text
              
              sleep 30
            done
            echo "Stack $stack_name has been deleted successfully"
          else
            echo "Stack $stack_name does not exist, skipping deletion"
          fi
        }

        # Delete old stacks first (if they exist)
        echo "Starting cleanup of old stacks..."
        
        # Delete application stack first as it depends on infrastructure
        echo "Checking for old application stack..."
        delete_stack "${OLD_PROJECT_NAME}-${ENVIRONMENT}-application"
        
        # Then delete infrastructure stack
        echo "Checking for old infrastructure stack..."
        delete_stack "${OLD_PROJECT_NAME}-${ENVIRONMENT}-infrastructure"
        
        echo "Old stack cleanup completed"

        # Check if new infrastructure stack exists
        if stack_exists "${PROJECT_NAME}-${ENVIRONMENT}-infra"; then
          echo "Infrastructure stack exists, checking status..."
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${PROJECT_NAME}-${ENVIRONMENT}-infra --query 'Stacks[0].StackStatus' --output text)
          
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE state. Deleting it first..."
            delete_stack "${PROJECT_NAME}-${ENVIRONMENT}-infra"
          fi
        else
          echo "Infrastructure stack does not exist, will create new one"
        fi

        # Deploy base infrastructure
        echo "Deploying infrastructure stack..."
        if ! aws cloudformation deploy \
          --template-file deployment/cloudformation-infrastructure.yml \
          --stack-name ${PROJECT_NAME}-${ENVIRONMENT}-infra \
          --parameter-overrides \
            ProjectName=${PROJECT_NAME} \
            Environment=${ENVIRONMENT} \
          --capabilities CAPABILITY_IAM; then
          
          echo "❌ Stack deployment failed. Fetching detailed error information..."
          aws cloudformation describe-stack-events \
            --stack-name ${PROJECT_NAME}-${ENVIRONMENT}-infra \
            --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' \
            --output text
          
          exit 1
        fi

        echo "Infrastructure stack deployed successfully"
        
        # Verify infrastructure stack outputs
        echo "Verifying infrastructure stack outputs..."
        aws cloudformation describe-stacks \
          --stack-name ${PROJECT_NAME}-${ENVIRONMENT}-infra \
          --query 'Stacks[0].Outputs' \
          --output table

        # Check if new application stack exists
        if stack_exists "${PROJECT_NAME}-${ENVIRONMENT}-app"; then
          echo "Application stack exists, checking status..."
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${PROJECT_NAME}-${ENVIRONMENT}-app --query 'Stacks[0].StackStatus' --output text)
          
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Application stack is in ROLLBACK_COMPLETE state. Deleting it first..."
            delete_stack "${PROJECT_NAME}-${ENVIRONMENT}-app"
          fi
        else
          echo "Application stack does not exist, will create new one"
        fi

        # Deploy application stack with zero desired count
        echo "Deploying application stack..."
        if ! aws cloudformation deploy \
          --template-file deployment/cloudformation-application.yml \
          --stack-name ${PROJECT_NAME}-${ENVIRONMENT}-app \
          --parameter-overrides \
            ProjectName=${PROJECT_NAME} \
            Environment=${ENVIRONMENT} \
            ImageTag=latest \
            DesiredCount=0 \
            WorkerDesiredCount=0 \
          --capabilities CAPABILITY_IAM; then
          
          echo "❌ Application stack deployment failed. Fetching detailed error information..."
          aws cloudformation describe-stack-events \
            --stack-name ${PROJECT_NAME}-${ENVIRONMENT}-app \
            --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' \
            --output text
          
          exit 1
        fi

        echo "Application stack deployed successfully"

        # Get AWS account ID first
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "AWS Account ID: ${AWS_ACCOUNT_ID}"
        
        # Construct ECR repository URIs using the account ID
        ECR_API_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/vcg/${ENVIRONMENT}/api"
        ECR_WORKER_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/vcg/${ENVIRONMENT}/worker"
        
        echo "ECR API URI: ${ECR_API_URI}"
        echo "ECR Worker URI: ${ECR_WORKER_URI}"
        
        # Set outputs
        echo "ecr-api-uri=${ECR_API_URI}" >> $GITHUB_OUTPUT
        echo "ecr-worker-uri=${ECR_WORKER_URI}" >> $GITHUB_OUTPUT
        
        # Get load balancer URL from infrastructure stack
        LOAD_BALANCER_URL=$(aws cloudformation describe-stacks \
          --stack-name ${PROJECT_NAME}-${ENVIRONMENT}-infra \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerUrl`].OutputValue' \
          --output text)
        
        echo "load-balancer-url=${LOAD_BALANCER_URL}" >> $GITHUB_OUTPUT

  # Build and Push Docker Images
  build-and-push:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        component: [api, worker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set build variables
      run: |
        # Debug - show all infrastructure outputs
        echo "=== DEBUG: Infrastructure Job Outputs ==="
        echo "ECR API URI from infrastructure: '${{ needs.deploy-infrastructure.outputs.ecr-api-uri }}'"
        echo "ECR Worker URI from infrastructure: '${{ needs.deploy-infrastructure.outputs.ecr-worker-uri }}'"
        echo "Load Balancer URL from infrastructure: '${{ needs.deploy-infrastructure.outputs.load-balancer-url }}'"
        echo "Component being built: ${{ matrix.component }}"
        echo "======================================"
        
        # Set the ECR repository URI based on component
        if [ "${{ matrix.component }}" = "api" ]; then
          ECR_URI="${{ needs.deploy-infrastructure.outputs.ecr-api-uri }}"
          DOCKERFILE="Dockerfile"
        else
          ECR_URI="${{ needs.deploy-infrastructure.outputs.ecr-worker-uri }}"
          DOCKERFILE="Dockerfile.worker"
        fi
        
        # Additional validation and fallback
        if [ -z "$ECR_URI" ] || [ "$ECR_URI" = "null" ]; then
          echo "⚠️ ECR URI from infrastructure job is empty, constructing manually..."
          
          # Get AWS account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS Account ID: $AWS_ACCOUNT_ID"
          
          # Construct ECR URI manually
          if [ "${{ matrix.component }}" = "api" ]; then
            ECR_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/vcg/${{ env.ENVIRONMENT }}/api"
          else
            ECR_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/vcg/${{ env.ENVIRONMENT }}/worker"
          fi
          
          echo "Manually constructed ECR URI: $ECR_URI"
        fi
        
        # Set environment variables
        echo "ECR_REPOSITORY_URI=$ECR_URI" >> $GITHUB_ENV
        echo "DOCKERFILE=$DOCKERFILE" >> $GITHUB_ENV
        
        # Final debug output
        echo "Final ECR Repository URI: $ECR_URI"
        echo "Final Dockerfile: $DOCKERFILE"

    - name: Build and push Docker image
      run: |
        # Debug output
        echo "Building image for ${{ matrix.component }}"
        echo "Using repository: $ECR_REPOSITORY_URI"
        echo "Using dockerfile: $DOCKERFILE"
        
        # Ensure ECR repository URI is set
        if [ -z "$ECR_REPOSITORY_URI" ]; then
          echo "Error: ECR_REPOSITORY_URI is empty"
          exit 1
        fi
        
        # Build image
        docker build -f $DOCKERFILE -t $ECR_REPOSITORY_URI:sha-${{ github.sha }} .
        docker tag $ECR_REPOSITORY_URI:sha-${{ github.sha }} $ECR_REPOSITORY_URI:latest
        
        # Push images
        docker push $ECR_REPOSITORY_URI:sha-${{ github.sha }}
        docker push $ECR_REPOSITORY_URI:latest

  # Deploy Application
  deploy-application:
    needs: [deploy-infrastructure, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update application stack with desired count
      run: |
        aws cloudformation deploy \
          --template-file deployment/cloudformation-application.yml \
          --stack-name ${PROJECT_NAME}-${ENVIRONMENT}-app \
          --parameter-overrides \
            ProjectName=${PROJECT_NAME} \
            Environment=${ENVIRONMENT} \
            ImageTag=latest \
            DesiredCount=1 \
            WorkerDesiredCount=1 \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for API service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${PROJECT_NAME}-${ENVIRONMENT} \
          --services ${PROJECT_NAME}-${ENVIRONMENT}-api

        echo "Waiting for Worker service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${PROJECT_NAME}-${ENVIRONMENT} \
          --services ${PROJECT_NAME}-${ENVIRONMENT}-worker

    - name: Test deployment
      run: |
        LOAD_BALANCER_URL="${{ needs.deploy-infrastructure.outputs.load-balancer-url }}"
        
        # Wait a bit for load balancer to route traffic
        sleep 30
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f "${LOAD_BALANCER_URL}/api/health" || exit 1
        
        # Test main endpoint
        echo "Testing main endpoint..."
        curl -f "${LOAD_BALANCER_URL}/" || exit 1
        
        echo "✅ Deployment successful!"
        echo "🌐 Application URL: ${LOAD_BALANCER_URL}"

  # Cleanup on failure
  cleanup-on-failure:
    needs: [deploy-infrastructure, build-and-push, deploy-application]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Rollback deployment
      run: |
        echo "🚨 Deployment failed, checking if rollback is needed..."
        
        # Function to check stack status
        check_stack_status() {
          local stack_name=$1
          aws cloudformation describe-stacks --stack-name $stack_name --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST"
        }
        
        # Function to delete stack if it exists and is in a deletable state
        delete_stack_if_exists() {
          local stack_name=$1
          local status=$(check_stack_status $stack_name)
          
          if [ "$status" != "DOES_NOT_EXIST" ]; then
            echo "Found stack $stack_name in $status state"
            if [ "$status" = "ROLLBACK_COMPLETE" ] || [ "$status" = "CREATE_FAILED" ] || [ "$status" = "ROLLBACK_FAILED" ]; then
              echo "Deleting failed stack $stack_name..."
              aws cloudformation delete-stack --stack-name $stack_name
              echo "Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete --stack-name $stack_name
            fi
          else
            echo "Stack $stack_name does not exist"
          fi
        }
        
        # Check and cleanup application stack first (it depends on infrastructure)
        APP_STACK="${PROJECT_NAME}-${ENVIRONMENT}-app"
        delete_stack_if_exists $APP_STACK
        
        # Then check and cleanup infrastructure stack
        INFRA_STACK="${PROJECT_NAME}-${ENVIRONMENT}-infra"
        delete_stack_if_exists $INFRA_STACK
        
        # Check if ECS services need cleanup
        if aws ecs describe-clusters --clusters ${PROJECT_NAME}-${ENVIRONMENT} --include TAGS >/dev/null 2>&1; then
          echo "ECS cluster exists, checking services..."
          
          # Check if services exist and have running tasks
          if aws ecs describe-services --cluster ${PROJECT_NAME}-${ENVIRONMENT} --services ${PROJECT_NAME}-${ENVIRONMENT}-api >/dev/null 2>&1; then
            RUNNING_COUNT=$(aws ecs describe-services --cluster ${PROJECT_NAME}-${ENVIRONMENT} --services ${PROJECT_NAME}-${ENVIRONMENT}-api --query 'services[0].runningCount' --output text)
            if [ "$RUNNING_COUNT" != "0" ] && [ "$RUNNING_COUNT" != "None" ]; then
              echo "Scaling down API service..."
              aws ecs update-service \
                --cluster ${PROJECT_NAME}-${ENVIRONMENT} \
                --service ${PROJECT_NAME}-${ENVIRONMENT}-api \
                --desired-count 0
            fi
          fi
          
          if aws ecs describe-services --cluster ${PROJECT_NAME}-${ENVIRONMENT} --services ${PROJECT_NAME}-${ENVIRONMENT}-worker >/dev/null 2>&1; then
            RUNNING_COUNT=$(aws ecs describe-services --cluster ${PROJECT_NAME}-${ENVIRONMENT} --services ${PROJECT_NAME}-${ENVIRONMENT}-worker --query 'services[0].runningCount' --output text)
            if [ "$RUNNING_COUNT" != "0" ] && [ "$RUNNING_COUNT" != "None" ]; then
              echo "Scaling down Worker service..."
              aws ecs update-service \
                --cluster ${PROJECT_NAME}-${ENVIRONMENT} \
                --service ${PROJECT_NAME}-${ENVIRONMENT}-worker \
                --desired-count 0
            fi
          fi
        else
          echo "ECS cluster does not exist, no service cleanup needed."
        fi
        
        echo "✅ Cleanup completed" 